"""
Making the implicit assumption that the Cache Directory exists and contains the relevant .ll files 
already generated by "python3 compile.py all llvm" and "python3 compile.py all size"
"""

import os
import sys
import subprocess
import logging
import pandas as pd
from pathlib import Path
from core.main.config import FEATURES, CACHE_DIR, POLY_DIR, AOC_DIR, OUTPUT_DIR

# LOGGING LEVEL
logging.basicConfig(stream=sys.stderr, level=logging.WARNING)

# Make sure we're running in the file dir
os.chdir(os.path.dirname(os.path.abspath(__file__)))


cache_dir = "../" + CACHE_DIR
poly_dir = "../" + POLY_DIR
aoc_dir = "../" + AOC_DIR
dataset_path = "../" + OUTPUT_DIR + "dataset.csv"


def main() -> None:
    if len(sys.argv) != 2:
        print("ERROR: Incorrect argument amount")
        sys.exit(1)
    version = sys.argv[1]

    test_names = []
    if version == "poly" or version == "all":
        test_names += [os.path.basename(f) for f in os.listdir(poly_dir) if not "utilities" in f]
    if version == "aoc" or version == "all":
        test_names += [Path(f).stem for f in os.listdir(aoc_dir) if f.endswith(".c")]
    columns = ["test"] + FEATURES + ["target-size"]

    extracted_features = pd.DataFrame(columns=columns)

    for test in test_names:
        test_file_raw = f"{cache_dir}{test}.ll"
        test_file_size = f"{cache_dir}{test}-size.bc"
        process = subprocess.run(
            ["./dev-test.sh", test_file_raw],
            check=True,
            capture_output=True,
            text=True,
        )
        output = process.stderr
        logging.debug(f"dev-test.sh output:\n{output}")
        output_vals = [float(val) for val in output.split(",")]
        if len(output_vals) != len(FEATURES):
            logging.error(
                f"Error extracting features for {test} - length of features mismatch.\nExpected: {len(FEATURES)}, Got: {len(output_vals)}\n"
            )
            continue
        logging.info(f"Extracted features for {test}: {output_vals}")
        target_size = os.stat(test_file_size).st_size
        row = [test] + output_vals + [target_size]

        extracted_features = extracted_features._append(
            pd.Series(row, index=columns), ignore_index=True
        )

    extracted_features.to_csv(dataset_path, encoding="utf-8", index=False)
    logging.info(f"Data written to {dataset_path}")

if __name__ == "__main__":
    main()
